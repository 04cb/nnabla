# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Sony Corporation
# This file is distributed under the same license as the Neural Network
# Libraries package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Neural Network Libraries 1.7.0.dev1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-10 15:10+0900\n"
"PO-Revision-Date: 2020-06-11 15:34+0900\n"
"Last-Translator: \n"
"Language: ja_JP\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"X-Generator: Poedit 2.3.1\n"

#: ../../python/file_format_converter/file_format_converter.rst:2
msgid "File format converter"
msgstr "ファイルフォーマットコンバーター"

#: ../../python/file_format_converter/file_format_converter.rst:5
msgid "Overview"
msgstr "概要"

#: ../../python/file_format_converter/file_format_converter.rst:45
msgid ""
"File format converter will realize Neural Network Libraries (or Console) "
"workflow with ONNX file format, and also NNabla C Runtime."
msgstr ""
"ファイルフォーマットコンバーターを使うと、ONNX ファイルフォーマット、および "
"NNabla C Runtime で Neural Network Libraries (または Console) ワークフローを実現"
"できます。"

#: ../../python/file_format_converter/file_format_converter.rst:48
msgid "File format converter has following functions."
msgstr "ファイルフォーマットコンバーターには次のような機能があります。"

#: ../../python/file_format_converter/file_format_converter.rst:50
msgid "Convert NNP variations to valid NNP"
msgstr "NNP のバリエーションを有効な NNP へ変換する"

#: ../../python/file_format_converter/file_format_converter.rst:51
#: ../../python/file_format_converter/file_format_converter.rst:264
msgid "Convert ONNX to NNP"
msgstr "ONNX から NNP へ変換する"

#: ../../python/file_format_converter/file_format_converter.rst:52
#: ../../python/file_format_converter/file_format_converter.rst:250
msgid "Convert NNP to ONNX"
msgstr "NNP から ONNX へ変換する"

#: ../../python/file_format_converter/file_format_converter.rst:53
msgid "Convert NNP to NNB(Binary format for NNabla C Runtime)"
msgstr "NNP から NNB へ変換する (NNabla C Runtime のバイナリー形式)"

#: ../../python/file_format_converter/file_format_converter.rst:54
#: ../../python/file_format_converter/file_format_converter.rst:306
msgid "Convert NNP to Tensorflow frozen graph"
msgstr "NNP から Tensorflow frozen graph へ変換する"

#: ../../python/file_format_converter/file_format_converter.rst:55
msgid "Convert Tensorflow checkpoint or frozen graph to NNP"
msgstr "Tensorflow checkpoint または frozen graph から NPP へ変換する"

#: ../../python/file_format_converter/file_format_converter.rst:56
msgid "Experimental: Convert NNP to C Source code for NNabla C Runtime"
msgstr "試用段階: NNP から NNabla C Runtime の C ソースコードへ変換する"

#: ../../python/file_format_converter/file_format_converter.rst:58
msgid ""
"**IMPORTANT NOTICE**: This file format converter still has some known problems."
msgstr ""
"**重要なお知らせ**: 本ファイルフォーマットコンバーターには、いくつかの既知の問題"
"が残っています。"

#: ../../python/file_format_converter/file_format_converter.rst:60
msgid ""
"Supported ONNX operator is limited. See :any:`Function-Level_Support_Status`."
msgstr ""
"サポートする ONNX オペレーターは制限されています。詳細は :any:`Function-"
"Level_Support_Status` をご覧ください。"

#: ../../python/file_format_converter/file_format_converter.rst:61
msgid ""
"Supported Tensorflow operator is limited. See :any:`Function-"
"Level_Support_Status`."
msgstr ""
"サポートする Tensorflow operator は制限されています。詳細は :any:`Function-"
"Level_Support_Status` をご覧ください"

#: ../../python/file_format_converter/file_format_converter.rst:62
msgid ""
"Converting NNP to C Source code is still experimental. It should work but did "
"not tested well."
msgstr ""
"NNP から C ソースコードへの変換はまだ試用段階です。動作しますが、十分にテストされ"
"ていません。"

#: ../../python/file_format_converter/file_format_converter.rst:66
msgid "Architecture"
msgstr "アーキテクチャー"

#: ../../python/file_format_converter/file_format_converter.rst:89
msgid ""
"This file format converter uses protobuf defined in Neural Network Libraries as "
"intermediate format."
msgstr ""
"本ファイルフォーマットコンバーターは、中間形式として Neural Network Libraries 内"
"に定義された protobuf を使います。"

#: ../../python/file_format_converter/file_format_converter.rst:91
msgid ""
"While this is not a generic file format converter, this is the specified "
"converter for Neural Network Libraries."
msgstr ""
"汎用のファイルフォーマットコンバーターではありませんが、Neural Network Libraries "
"では指定されたコンバーターです。"

#: ../../python/file_format_converter/file_format_converter.rst:93
msgid ""
"This converter can specify both inputs and outputs for ONNX file, but if ONNX "
"file contains a function unsupported by Neural Network Libraries, it may cause "
"error in conversion."
msgstr ""
"本コンバーターは、ONNX ファイルに対する入力および出力を指定可能ですが、ONNX ファ"
"イルに Neural Network Libraries がサポートしない機能を含んでいる場合、変換中にエ"
"ラーが発生する可能性があります。"

#: ../../python/file_format_converter/file_format_converter.rst:95
msgid ""
"This converter also provides some intermediate process functionalities. See :ref:"
"`Process`."
msgstr ""
"また本コンバーターは、中間プロセス機能も提供します。詳細は、 :ref:`Process` をご"
"覧ください。"

#: ../../python/file_format_converter/file_format_converter.rst:98
msgid "Conversion"
msgstr "変換"

#: ../../python/file_format_converter/file_format_converter.rst:101
msgid "Supported Formats"
msgstr "サポートするフォーマット"

#: ../../python/file_format_converter/file_format_converter.rst:104
msgid "NNP"
msgstr "NNP"

#: ../../python/file_format_converter/file_format_converter.rst:106
msgid "**NNP** is file format of NNabla."
msgstr "**NNP** は NNabla のファイルフォーマットです。"

#: ../../python/file_format_converter/file_format_converter.rst:108
msgid "NNP format is described at :any:`../../format`."
msgstr "NNP フォーマットは :any:`../../format` に記述されます。"

#: ../../python/file_format_converter/file_format_converter.rst:110
msgid "But with this file format converter is work with several variation of NNP."
msgstr ""
"本ファイルフォーマットコンバーターでは、いくつかの NNP バリエーションでしか動作し"
"ません。"

#: ../../python/file_format_converter/file_format_converter.rst:112
msgid "Standard NNP format (.nnp)"
msgstr "NNP 標準フォーマット (.nnp)"

#: ../../python/file_format_converter/file_format_converter.rst:113
msgid "Contents of NNP files(.nntxt, .prototxt, .h5, .protobuf)"
msgstr "NNP ファイルの内容 (.nntxt, .prototxt, .h5, .protobuf)"

#: ../../python/file_format_converter/file_format_converter.rst:117
msgid "ONNX"
msgstr "ONNX"

#: ../../python/file_format_converter/file_format_converter.rst:120
msgid "Limitation"
msgstr "制限事項"

#: ../../python/file_format_converter/file_format_converter.rst:122
msgid "Training is not supported."
msgstr "学習はサポートしません。"

#: ../../python/file_format_converter/file_format_converter.rst:123
msgid "Only supports operator set 6 and 9."
msgstr "オペレーターセット 6 と 9 のみサポートします。"

#: ../../python/file_format_converter/file_format_converter.rst:124
msgid "Not all functions are supported. See :any:`Function-Level_Support_Status`."
msgstr ""
"すべての機能をサポートしているわけではありません。詳細は :any:`Function-"
"Level_Support_Status` をご覧ください。"

#: ../../python/file_format_converter/file_format_converter.rst:125
msgid ""
"Only limited Neural Network Console projects supported.  See :any:"
"`Model_Support_Status`."
msgstr ""
"限られた Neural Network Console のプロジェクトのみサポートします。詳細は :any:"
"`Model_Support_Status` をご覧ください。"

#: ../../python/file_format_converter/file_format_converter.rst:126
msgid ""
"In some case you must install onnx package by hand. For example you can install "
"with command `pip install onnx` or if you want to install system wide, you can "
"install with command `sudo -HE pip install onnx`."
msgstr ""
"onnx package をご自身の手でインストールしなければならない場合があります。例え"
"ば、 `pip install onnx` コマンドでインストールできます。システム全体にインストー"
"ルする場合は、 `sudo -HE pip install onnx` コマンドでインストールできます。"

#: ../../python/file_format_converter/file_format_converter.rst:129
msgid "NNB"
msgstr "NNB"

#: ../../python/file_format_converter/file_format_converter.rst:131
msgid ""
"NNB is compact binary format for NNabla C Runtime. It is designed for `nnabla-c-"
"runtime`_."
msgstr ""
"NNB は NNabla C Runtime のコンパクトなバイナリー形式です。 `nnabla-c-runtime`_ 用"
"に設計されています。"

#: ../../python/file_format_converter/file_format_converter.rst:138
msgid "C Source Code"
msgstr "C ソースコード"

#: ../../python/file_format_converter/file_format_converter.rst:140
msgid ""
"File format converter supports C source code output for `nnabla-c-runtime`_."
msgstr ""
"ファイルフォーマットコンバーターは、 `nnabla-c-runtime`_ の C ソースコード出力を"
"サポートします。"

#: ../../python/file_format_converter/file_format_converter.rst:143
msgid "Tensorflow"
msgstr "Tensorflow"

#: ../../python/file_format_converter/file_format_converter.rst:145
msgid "Through onnx, tensorflow import and export is partially supported."
msgstr "tensorflow import と export は onnx を通じて部分的にサポートされます。"

#: ../../python/file_format_converter/file_format_converter.rst:150
msgid "As for the importer, 3 formats tends to be supported:"
msgstr "importer に関しては、3 つのフォーマットがサポートされる場合があります:"

#: ../../python/file_format_converter/file_format_converter.rst:148
msgid ".pb, tensorflow frozen graph format"
msgstr ".pb, tensorflow frozen graph フォーマット"

#: ../../python/file_format_converter/file_format_converter.rst:149
msgid ".ckpt, tensorflow check point format version 1"
msgstr ".ckpt, tensorflow check point フォーマット version 1"

#: ../../python/file_format_converter/file_format_converter.rst:150
msgid ".ckpt.*, tensorflow check point format version 2"
msgstr ".ckpt.*, tensorflow check point フォーマット version 2"

#: ../../python/file_format_converter/file_format_converter.rst:152
msgid ""
"As for the exporter, some of Neural Network Console projects are supported. See :"
"any:`Model_Support_Status`. The output of converter is tensorflow frozen graph "
"format(e.g. *.pb)"
msgstr ""
"exporter に関して、いくつかの Neural Network Console project をサポートします。詳"
"細は :any:`Model_Support_Status` をご覧ください。コンバーターの出力は tensorflow "
"frozen graph フォーマットです (例: *.pb)。"

#: ../../python/file_format_converter/file_format_converter.rst:155
msgid ""
"Before using this converter, please confirm if tensorflow and related packages "
"are installed:"
msgstr ""
"本コンバーターを使用する前に、tnsorflow と関連する package がインストールされてい"
"ることを確認してください:"

#: ../../python/file_format_converter/file_format_converter.rst:158
msgid ""
"$ pip install tensorflow==1.5 onnx==1.4.1 onnx_tf\n"
"$ pip install https://github.com/onnx/tensorflow-onnx.git"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:165
msgid "Process"
msgstr "プロセス"

#: ../../python/file_format_converter/file_format_converter.rst:168
msgid "Expand Repeat and Recurrent"
msgstr "繰り返しの拡張と循環"

#: ../../python/file_format_converter/file_format_converter.rst:170
msgid ""
"Neural Network Console supports `LoopControl` pseudo functions `RepeatStart`_,  "
"`RepeatEnd`_, `RecurrentInput`_, `RecurrentOutput`_ or `Delay`_."
msgstr ""
"Neural Network Console は `LoopControl` 擬似関数である `RepeatStart`_, "
"`RepeatEnd`_, `RecurrentInput`_, `RecurrentOutput`_ または `Delay`_ をサポートし"
"ています。"

#: ../../python/file_format_converter/file_format_converter.rst:172
msgid ""
"Currently, these functions are not supported by Neural Network Libraries "
"directly."
msgstr ""
"現在、Neural Network Library ではこれらの関数を直接的にはサポートしていません。"

#: ../../python/file_format_converter/file_format_converter.rst:174
msgid ""
"The file format converter expands the network and removes these pseudo functions "
"by default."
msgstr ""
"ファイルフォーマットコンバーターは、ネットワークを拡張し、デフォルトでこれらの擬"
"似関数を削除します。"

#: ../../python/file_format_converter/file_format_converter.rst:182
msgid ""
"If you want to preserve these, specify command line option `--nnp-no-expand-"
"network` when converting files."
msgstr ""
"これらの関数を保持したい場合、ファイル変換時にコマンドラインオプション `--nnp-no-"
"expand-network` を指定してください。"

#: ../../python/file_format_converter/file_format_converter.rst:186
msgid "Split network"
msgstr "ネットワークを分割する"

#: ../../python/file_format_converter/file_format_converter.rst:188
msgid "You can split network with `--split` option."
msgstr "`--split` オプションを使ってネットワークを分割できます。"

#: ../../python/file_format_converter/file_format_converter.rst:190
msgid "See :ref:`Splitting network` to use this functionality."
msgstr "この機能を使用する場合、 :ref:`Splitting network` をご覧ください。"

#: ../../python/file_format_converter/file_format_converter.rst:194
msgid "Usage"
msgstr "使い方"

#: ../../python/file_format_converter/file_format_converter.rst:197
msgid "NNP Operation"
msgstr "NNP 操作"

#: ../../python/file_format_converter/file_format_converter.rst:200
msgid "Convert NNP to NNP"
msgstr "NNP から NNP への変換"

#: ../../python/file_format_converter/file_format_converter.rst:202
msgid "Sometimes we need to convert NNP to NNP."
msgstr "NNP から NNP への変換が必要な場合があります。"

#: ../../python/file_format_converter/file_format_converter.rst:204
msgid ""
"Most major usecase, expand repeat or recurrent network supported by Neural "
"Network Console but not supported by C++ API."
msgstr ""
"たいていの場合、繰り返しの拡張、あるいは循環ネットワークは Neural Network "
"Console ではサポートしていますが、C++ API ではサポートしていません。"

#: ../../python/file_format_converter/file_format_converter.rst:207
msgid "$ nnabla_cli convert input.nnp output.nnp"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:212
msgid "Convert console output to single NNP file"
msgstr "console 出力から単一の NNP ファイルへ変換する"

#: ../../python/file_format_converter/file_format_converter.rst:214
msgid ""
"Current version of Neural Network Console outputs .nntxt and .h5 as training "
"result."
msgstr ""
"Neural Network Console の現在のバージョンは .nntxt と .h5 を学習結果として出力し"
"ます。"

#: ../../python/file_format_converter/file_format_converter.rst:217
msgid ""
"Then we need to convert separated files into single NNP and parameters store "
"with protobuf format."
msgstr ""
"続いて、分離したファイルを単一の NNP に変換し、パラメータを protobuf 形式で格納す"
"る必要があります。"

#: ../../python/file_format_converter/file_format_converter.rst:220
msgid "$ nnabla_cli convert net.nntxt parameters.h5 output.nnp"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:226
msgid ""
"Convert console output to single NNP file without expanding Repeat or recurrent."
msgstr "console 出力から単一の NNP ファイルへ 繰り返しの拡張や循環なしに変換する"

#: ../../python/file_format_converter/file_format_converter.rst:228
msgid ""
"$ nnabla_cli convert --nnp-no-expand-network net.nntxt parameters.h5 output.nnp"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:233
msgid "Keep parameter format as hdf5"
msgstr "パラメータ形式を hdf5 で保持する"

#: ../../python/file_format_converter/file_format_converter.rst:235
msgid ""
"$ nnabla_cli convert --nnp-no-expand-network --nnp-parameter-h5 net.nntxt "
"parameters.h5 output.nnp"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:240
msgid "Everything into single nntxt."
msgstr "すべてを単一の nntxt に入れる"

#: ../../python/file_format_converter/file_format_converter.rst:242
msgid ""
"$ nnabla_cli convert --nnp-parameter-nntxt net.nntxt parameters.h5 output.nntxt"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:247
msgid "ONNX Operation"
msgstr "ONNX 操作"

#: ../../python/file_format_converter/file_format_converter.rst:252
msgid "$ nnabla_cli convert input.nnp output.onnx"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:256
msgid ""
"If specify output onnx opset 9, please use the following (default is opset 7):"
msgstr ""
"onnx opset 9 出力を指定する場合、次のように指定してください (デフォルトは opset "
"7)："

#: ../../python/file_format_converter/file_format_converter.rst:258
msgid "$ nnabla_cli convert input.nnp output.onnx -d opset_9"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:266
msgid "$ nnabla_cli convert input.onnx output.nnp"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:270
msgid "Currently, opset 6,7,9,10,11 are supported to import."
msgstr "現在、インポートでは opset 6,7,9,10,11 をサポートします。"

#: ../../python/file_format_converter/file_format_converter.rst:273
msgid "C Runtime Operation"
msgstr "C Runtime 操作"

#: ../../python/file_format_converter/file_format_converter.rst:275
msgid ""
"Generally, it is better to set the batch size to 1 when convert file to C "
"runtime. If the batch size is larger than 1, it is necessary to process the "
"batch size data collectively To make the batch size 1, add `-b 1` to command "
"line option."
msgstr ""
"一般的に、ファイルから C Runtime に変換するときは、バッチサイズを 1 に指定する方"
"がよいとされています。バッチサイズが 1 より大きい場合、バッチサイズを 1 にするた"
"めにまとめて処理する必要があります。コマンドラインオプションで `-b 1` を追加して"
"ください。"

#: ../../python/file_format_converter/file_format_converter.rst:280
msgid "Convert NNP to NNB"
msgstr "NNP から NNB へ変換する"

#: ../../python/file_format_converter/file_format_converter.rst:282
msgid "$ nnabla_cli convert -b 1 input.nnp output.nnb"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:287
msgid "Convert NNP to C source code"
msgstr "NNP から C ソースコードへ変換する"

#: ../../python/file_format_converter/file_format_converter.rst:289
msgid "$ nnabla_cli convert -b 1 -O CSRC input.onnx output-dir"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:295
msgid "Quantization"
msgstr "量子化"

#: ../../python/file_format_converter/file_format_converter.rst:297
msgid ""
"C-runtime library supports binary(or fixed point) weights, which can "
"dramatically downsize the model (and footprint). See :any:`compress_network` for "
"how to quantize your model."
msgstr ""
"C-runtime ライブラリは、バイナリ (または固定小数点) の重みをサポートしており、モ"
"デル (およびフットプリント) のサイズを劇的に縮小できます。モデルを量子化する方法"
"については、 :any:`compress_network` を参照してください。"

#: ../../python/file_format_converter/file_format_converter.rst:303
msgid "Tensorflow Operation"
msgstr "Tensorflow 操作"

#: ../../python/file_format_converter/file_format_converter.rst:308
msgid "$ nnabla_cli convert input.nnp output.pb"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:314
msgid "Convert Tensorflow frozen graph to NNP"
msgstr "NNP から Tensorflow frozen graph へ変換する"

#: ../../python/file_format_converter/file_format_converter.rst:316
msgid "$ nnabla_cli convert input.pb output.nnp"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:322
msgid "Convert Tensorflow checkpoint to NNP"
msgstr "Tensorflow checkpoint から NNP へ変換する"

#: ../../python/file_format_converter/file_format_converter.rst:324
msgid "For checkpoint version 1:"
msgstr "checkpoint version 1 の場合:"

#: ../../python/file_format_converter/file_format_converter.rst:326
msgid "$ nnabla_cli convert input.ckpt output.nnp --inputs x0,x1 --outputs y0,y1"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:331
msgid ""
"In the same directory of input.ckpt, the related files, such as checkpoint, "
"input.ckpt.meta and so on are required to exist. The `inputs` required the input "
"name of model, separated by comma. The `outputs` is same. In parsing checkpoint "
"format, input and output needs to be provided."
msgstr ""
"input.ckpt と同じディレクトリには、 その関連ファイルである checkpoint、input."
"ckpt.meta などがあることが必要です。 `inputs` では、モデルの入力名がコンマで区切"
"られていることが必要です。 `outputs` も同様です。checkpoint 形式の解析では、入力"
"と出力があることが必要です。"

#: ../../python/file_format_converter/file_format_converter.rst:334
msgid "For checkpoint version 2:"
msgstr "checkpoint version 2 の場合:"

#: ../../python/file_format_converter/file_format_converter.rst:336
msgid ""
"$ nnabla_cli convert input.ckpt.meta output.nnp --inputs x0,x1 --outputs y0,y1"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:341
msgid ""
"In the same directory of input.ckpt.meta, the related files, such as checkpoint, "
"*.ckpt.index, ... and so on are required to exist."
msgstr ""
"input.ckpt.meta と同じディレクトリには、その関連ファイルである checkpoint、 *."
"ckpt.index などがあることが必要です。"

#: ../../python/file_format_converter/file_format_converter.rst:346
msgid "Splitting network"
msgstr "分割ネットワーク"

#: ../../python/file_format_converter/file_format_converter.rst:348
msgid "Splitting network is a bit complicated and can be troublesome."
msgstr "分割ネットワークは少し複雑で面倒な場合があります。"

#: ../../python/file_format_converter/file_format_converter.rst:351
msgid ""
"NNP file could have multiple Executor networks, but Split supports only single "
"network to split."
msgstr ""
"NNP ファイルは複数の Executor ネットワークを持つことがありますが、Split は単一"
"ネットワークを分割することしかサポートしません。"

#: ../../python/file_format_converter/file_format_converter.rst:353
msgid ""
"First, you must confirm how many Executors there are in the NNP, and specify "
"what executor to split with `nnabla_cli dump`."
msgstr ""
"まず、NNP の中に executor がいくつあるかを確認し、どの executor を `nnabla_cli "
"dump` で分割するのか指定してください。"

#: ../../python/file_format_converter/file_format_converter.rst:355
msgid ""
"$ nnabla_cli dump squeezenet11.files/SqueezeNet-1.1/*.{nntxt,h5}\n"
"2018-08-27 15:02:40,006 [nnabla][INFO]: Initializing CPU extension...\n"
"Importing squeezenet11.files/SqueezeNet-1.1/net.nntxt\n"
"Importing squeezenet11.files/SqueezeNet-1.1/parameters.h5\n"
" Expanding Training.\n"
" Expanding Top5Error.\n"
" Expanding Top1Error.\n"
" Expanding Runtime.\n"
"  Optimizer[0]: Optimizer\n"
"  Optimizer[0]:  (In) Data      variable[0]: Name:TrainingInput                  "
"Shape:[-1, 3, 480, 480]\n"
"  Optimizer[0]:  (In) Data      variable[1]: Name:SoftmaxCrossEntropy_T          "
"Shape:[-1, 1]\n"
"  Optimizer[0]:  (Out)Loss      variable[0]: Name:SoftmaxCrossEntropy            "
"Shape:[-1, 1]\n"
"  Monitor  [0]: train_error\n"
"  Monitor  [0]:  (In) Data      variable[0]: Name:Input                          "
"Shape:[-1, 3, 320, 320]\n"
"  Monitor  [0]:  (In) Data      variable[1]: Name:Top5Error_T                    "
"Shape:[-1, 1]\n"
"  Monitor  [0]:  (Out)Monitor   variable[0]: Name:Top5Error                      "
"Shape:[-1, 1]\n"
"  Monitor  [1]: valid_error\n"
"  Monitor  [1]:  (In) Data      variable[0]: Name:Input                          "
"Shape:[-1, 3, 320, 320]\n"
"  Monitor  [1]:  (In) Data      variable[1]: Name:Top1rror_T                     "
"Shape:[-1, 1]\n"
"  Monitor  [1]:  (Out)Monitor   variable[0]: Name:Top1rror                       "
"Shape:[-1, 1]\n"
"  Executor [0]: Executor\n"
"  Executor [0]:  (In) Data      variable[0]: Name:Input                          "
"Shape:[-1, 3, 320, 320]\n"
"  Executor [0]:  (Out)Output    variable[0]: Name:y'                             "
"Shape:[-1, 1000]"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:383
msgid "As above output now you know only 1 executor."
msgstr "上記の出力結果によって、1 つの executor のみがあることが分かります。"

#: ../../python/file_format_converter/file_format_converter.rst:385
msgid "Then you can show executor information with `nnabla_cli dump -E0`."
msgstr "続いて `nnabla_cli dump -E0` で executor の詳細情報を見ることができます。"

#: ../../python/file_format_converter/file_format_converter.rst:387
msgid ""
"$ nnabla_cli dump -E0 squeezenet11.files/SqueezeNet-1.1/*.{nntxt,h5}\n"
"2018-08-27 15:03:26,547 [nnabla][INFO]: Initializing CPU extension...\n"
"Importing squeezenet11.files/SqueezeNet-1.1/net.nntxt\n"
"Importing squeezenet11.files/SqueezeNet-1.1/parameters.h5\n"
" Try to leave only executor[Executor].\n"
" Expanding Runtime.\n"
"  Executor [0]: Executor\n"
"  Executor [0]:  (In) Data      variable[0]: Name:Input                          "
"Shape:[-1, 3, 320, 320]\n"
"  Executor [0]:  (Out)Output    variable[0]: Name:y'                             "
"Shape:[-1, 1000]"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:399
msgid "You can get list of function adding `-F` option."
msgstr "`-F` オプションにより、関数リストを取得できます。"

#: ../../python/file_format_converter/file_format_converter.rst:401
msgid ""
"$ nnabla_cli dump -FE0 squeezenet11.files/SqueezeNet-1.1/*.{nntxt,h5}\n"
"2018-08-27 15:04:10,954 [nnabla][INFO]: Initializing CPU extension...\n"
"Importing squeezenet11.files/SqueezeNet-1.1/net.nntxt\n"
"Importing squeezenet11.files/SqueezeNet-1.1/parameters.h5\n"
" Try to leave only executor[Executor].\n"
" Expanding Runtime.\n"
"  Executor [0]: Executor\n"
"  Executor [0]:  (In) Data      variable[0]: Name:Input                          "
"Shape:[-1, 3, 320, 320]\n"
"  Executor [0]:  (Out)Output    variable[0]: Name:y'                             "
"Shape:[-1, 1000]\n"
"  Executor [0]:   Function[  0  ]: Type: Slice                Name: Slice\n"
"  Executor [0]:   Function[  1  ]: Type: ImageAugmentation    Name: "
"ImageAugmentation\n"
"  Executor [0]:   Function[  2  ]: Type: MulScalar            Name: SqueezeNet/"
"MulScalar\n"
"  Executor [0]:   Function[  3  ]: Type: AddScalar            Name: SqueezeNet/"
"AddScalar\n"
"  Executor [0]:   Function[  4  ]: Type: Convolution          Name: SqueezeNet/"
"Convolution\n"
"  Executor [0]:   Function[  5  ]: Type: ReLU                 Name: SqueezeNet/"
"ReLU\n"
"  Executor [0]:   Function[  6  ]: Type: MaxPooling           Name: SqueezeNet/"
"MaxPooling\n"
"\n"
"    SNIP...\n"
"\n"
"  Executor [0]:   Function[ 63  ]: Type: ReLU                 Name: SqueezeNet/"
"FireModule_8/Expand1x1ReLU\n"
"  Executor [0]:   Function[ 64  ]: Type: Concatenate          Name: SqueezeNet/"
"FireModule_8/Concatenate\n"
"  Executor [0]:   Function[ 65  ]: Type: Dropout              Name: SqueezeNet/"
"Dropout\n"
"  Executor [0]:   Function[ 66  ]: Type: Convolution          Name: SqueezeNet/"
"Convolution_2\n"
"  Executor [0]:   Function[ 67  ]: Type: ReLU                 Name: SqueezeNet/"
"ReLU_2\n"
"  Executor [0]:   Function[ 68  ]: Type: AveragePooling       Name: SqueezeNet/"
"AveragePooling\n"
"  Executor [0]:   Function[ 69  ]: Type: Reshape              Name: SqueezeNet/"
"Reshape\n"
"  Executor [0]:   Function[ 70  ]: Type: Identity             Name: y'"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:431
msgid ""
"If you want to get network without Image Augmentation, according to above "
"output, ImageAugmentation is placed on index 2. With splitting after index 3, "
"you can get network without ImageAugmentation. You must specify `-E0 -S 3-` "
"option to `nnabla_cli convert` This command rename output to `XXX_S_E.nnp`, XXX "
"is original name, S is start function index, and E is end function index."
msgstr ""
"ImageAugmentation を除いたネットワークを取得したい場合、上記の出力結果によれば、"
"ImageAugmentation は index 2 に配置されます。index 3 に分割した後、 "
"ImageAugmentation を除いたネットワークを取得できます。 `nnabla_cli 変換` で `-E0 "
"-S 3-` オプションを指定する必要があります。このコマンドで出力を `XXX_S_E.nnp` と"
"いう名前に変更します。 XXX は元の名前で、S は開始関数の index、E は終了関数の "
"index です。"

#: ../../python/file_format_converter/file_format_converter.rst:436
msgid ""
"$ nnabla_cli convert -E0 -S 3- squeezenet11.files/SqueezeNet-1.1/*.{nntxt,h5} "
"splitted.nnp\n"
"2018-08-27 15:20:21,950 [nnabla][INFO]: Initializing CPU extension...\n"
"Importing squeezenet11.files/SqueezeNet-1.1/net.nntxt\n"
"Importing squeezenet11.files/SqueezeNet-1.1/parameters.h5\n"
" Try to leave only executor[Executor].\n"
" Expanding Runtime.\n"
"   Shrink 3 to 70.\n"
"    Output to [splitted_3_70.nnp]"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:448
msgid ""
"Finally you got `splitted_3_70.nnp` as splitted output. You can check splitted "
"NNP with `nnabla_cli dump`"
msgstr ""
"最終的に分割された出力として `splitted_3_70.nnp` を取得できました。分割された "
"NPP は `nnabla_cli dump` で確認できます。"

#: ../../python/file_format_converter/file_format_converter.rst:451
msgid ""
"NOTE: Input shape is changed from original network. New input shape is same as "
"start function's input."
msgstr ""
"注意: Input shape は元のネットワークから変更されました。新しい input shape は開始"
"関数の入力と同じです。"

#: ../../python/file_format_converter/file_format_converter.rst:453
msgid ""
"$ nnabla_cli dump splitted_3_70.nnp\n"
"2018-08-27 15:20:28,021 [nnabla][INFO]: Initializing CPU extension...\n"
"Importing splitted_3_70.nnp\n"
" Expanding Runtime.\n"
"  Executor [0]: Executor\n"
"  Executor [0]:  (In) Data      variable[0]: Name:SqueezeNet/MulScalar           "
"Shape:[-1, 3, 227, 227]\n"
"  Executor [0]:  (Out)Output    variable[0]: Name:y'                             "
"Shape:[-1, 1000]"
msgstr ""

#: ../../python/file_format_converter/file_format_converter.rst:463
msgid "Done."
msgstr "以上で終了です。"
