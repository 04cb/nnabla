# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Sony Corporation
# This file is distributed under the same license as the Neural Network
# Libraries package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Neural Network Libraries 1.7.0.dev1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-10 15:10+0900\n"
"PO-Revision-Date: 2020-05-14 11:36+0900\n"
"Last-Translator: \n"
"Language: ja_JP\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../python/command_line_interface.rst:2
msgid "Python Command Line Interface"
msgstr "Python コマンドラインインターフェイス"

#: ../../python/command_line_interface.rst:4
msgid ""
"Nnabla has command line interface utility which can do train, "
"forward(inference), convert param and dataset, measure performance, file "
"format converter and so on."
msgstr ""
"NNabla は、学習したり、推論 ( フォワード ) "
"を実行したり、パラメータやデータセットを変換したり、パフォーマンスを測定したり、ファイルを変換したりすることなどができる、コマンドラインインターフェイスのユーティリティを持っています。"

#: ../../python/command_line_interface.rst:7
msgid ""
"usage: nnabla_cli [-h] [-m]\n"
"                  "
"{train,infer,forward,encode_param,decode_param,profile,conv_dataset,compare_with_cpu,create_image_classification_dataset,upload,create_tar,function_info,optimize,dump,nnb_template,convert,plot_series,plot_timer,draw_graph,version}"
"\n"
"                  ...\n"
"\n"
"Command line interface for NNabla(Version 1.0.11.dev1, Build "
"181226024531)\n"
"\n"
"positional arguments:\n"
"  "
"{train,infer,forward,encode_param,decode_param,profile,conv_dataset,compare_with_cpu,create_image_classification_dataset,upload,create_tar,function_info,optimize,dump,nnb_template,convert,plot_series,plot_timer,draw_graph,version}"
"\n"
"    train               Training with NNP.\n"
"    infer               Do inference with NNP and binary data file input."
"\n"
"    forward             Do evaluation with NNP and test dataset.\n"
"    encode_param        Encode plain text to parameter format.\n"
"    decode_param        Decode parameter to plain text.\n"
"    profile             Profiling performance with NNP.\n"
"    conv_dataset        Convert CSV dataset to cache.\n"
"    compare_with_cpu    Compare performance between two nntxt.\n"
"    create_image_classification_dataset\n"
"                        Create dataset from image files.\n"
"    upload              Upload dataset to Neural Network Console.\n"
"    create_tar          Create tar file for Neural Network Console.\n"
"    function_info       Output function info.\n"
"    optimize            Optimize pb model.\n"
"    dump                Dump network with supported format.\n"
"    nnb_template        Generate NNB config file template.\n"
"    convert             File format converter.\n"
"    plot_series         Plot *.series.txt files.\n"
"    plot_timer          Plot *.timer.txt files.\n"
"    draw_graph          Draw a graph in a NNP or nntxt file with "
"graphviz.\n"
"    version             Print version and build number.\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -m, --mpi             exec with mpi."
msgstr ""

#: ../../python/command_line_interface.rst:45
msgid "Work with NNP"
msgstr "NNP での作業"

#: ../../python/command_line_interface.rst:48
msgid "Training"
msgstr "学習"

#: ../../python/command_line_interface.rst:50
msgid ""
"usage: nnabla_cli train [-h] -c CONFIG [-p PARAM] -o OUTDIR\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -c CONFIG, --config CONFIG\n"
"                        path to nntxt\n"
"  -p PARAM, --param PARAM\n"
"                        path to parameter file\n"
"  -o OUTDIR, --outdir OUTDIR\n"
"                        output directory"
msgstr ""

#: ../../python/command_line_interface.rst:64
msgid "Profile"
msgstr "プロファイル"

#: ../../python/command_line_interface.rst:66
msgid ""
"usage: nnabla_cli profile [-h] -c CONFIG -o OUTDIR\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -c CONFIG, --config CONFIG\n"
"                        path to nntxt\n"
"  -o OUTDIR, --outdir OUTDIR\n"
"                        output directory"
msgstr ""

#: ../../python/command_line_interface.rst:79
msgid "Forward"
msgstr "CSV データセットを用いた推論"

#: ../../python/command_line_interface.rst:81
msgid ""
"usage: nnabla_cli forward [-h] -c CONFIG [-p PARAM] [-d DATASET] -o "
"OUTDIR [-b BATCH_SIZE]\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -c CONFIG, --config CONFIG\n"
"                        path to nntxt\n"
"  -p PARAM, --param PARAM\n"
"                        path to parameter file\n"
"  -d DATASET, --dataset DATASET\n"
"                        path to CSV dataset\n"
"  -o OUTDIR, --outdir OUTDIR\n"
"                        output directory\n"
"  -b BATCH_SIZE, --batch_size BATCH_SIZE\n"
"                        Batch size to use batch size in nnp file set -1."
msgstr ""

#: ../../python/command_line_interface.rst:100
msgid "Inference"
msgstr "バイナリデータを用いた推論"

#: ../../python/command_line_interface.rst:102
msgid ""
"usage: nnabla_cli infer [-h] -c CONFIG [-o OUTPUT] [-p PARAM] [-b "
"BATCH_SIZE] inputs [inputs ...]\n"
"\n"
"positional arguments:\n"
"  inputs\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -c CONFIG, --config CONFIG\n"
"                        path to nntxt\n"
"  -o OUTPUT, --output OUTPUT\n"
"                        output file prefix\n"
"  -p PARAM, --param PARAM\n"
"                        path to parameter file\n"
"  -b BATCH_SIZE, --batch_size BATCH_SIZE\n"
"                        Batch size to use batch size in nnp file set -1."
msgstr ""

#: ../../python/command_line_interface.rst:122
msgid "Compare with CPU"
msgstr "CPU による比較"

#: ../../python/command_line_interface.rst:124
msgid ""
"usage: nnabla_cli compare_with_cpu [-h] -c CONFIG -c2 CONFIG2 -o OUTDIR\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -c CONFIG, --config CONFIG\n"
"                        path to nntxt\n"
"  -c2 CONFIG2, --config2 CONFIG2\n"
"                        path to cpu nntxt\n"
"  -o OUTDIR, --outdir OUTDIR\n"
"                        output directory"
msgstr ""

#: ../../python/command_line_interface.rst:139
msgid "Dataset manipulation"
msgstr "データセットの操作"

#: ../../python/command_line_interface.rst:142
msgid "Encode parameter"
msgstr "パラメータのエンコード"

#: ../../python/command_line_interface.rst:144
msgid ""
"usage: nnabla_cli encode_param [-h] -i INDIR [-p PARAM]\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -i INDIR, --indir INDIR\n"
"                        input directory\n"
"  -p PARAM, --param PARAM\n"
"                        path to parameter file"
msgstr ""

#: ../../python/command_line_interface.rst:157
msgid "Decode parameter"
msgstr "パラメータのデコード"

#: ../../python/command_line_interface.rst:159
msgid ""
"usage: nnabla_cli decode_param [-h] [-p PARAM] -o OUTDIR\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -p PARAM, --param PARAM\n"
"                        path to parameter file\n"
"  -o OUTDIR, --outdir OUTDIR\n"
"                        output directory"
msgstr ""

#: ../../python/command_line_interface.rst:172
msgid "Convert dataset"
msgstr "データセットの変換"

#: ../../python/command_line_interface.rst:174
msgid ""
"usage: nnabla_cli conv_dataset [-h] [-F] [-S] [-N] source destination\n"
"\n"
"positional arguments:\n"
"  source\n"
"  destination\n"
"\n"
"optional arguments:\n"
"  -h, --help       show this help message and exit\n"
"  -F, --force      force overwrite destination\n"
"  -S, --shuffle    shuffle data\n"
"  -N, --normalize  normalize data range"
msgstr ""

#: ../../python/command_line_interface.rst:190
msgid "Create image classification dataset"
msgstr "画像分類データセットの作成"

#: ../../python/command_line_interface.rst:193
msgid ""
"usage: nnabla_cli create_image_classification_dataset [-h] -i SOURCEDIR "
"-o OUTDIR -c CHANNEL -w WIDTH -g HEIGHT -m MODE -s SHUFFLE -f1 FILE1 [-r1"
" RATIO1] [-f2 FILE2]\n"
"                                                      [-r2 RATIO2]\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -i SOURCEDIR, --sourcedir SOURCEDIR\n"
"                        source directory with directories for each class\n"
"  -o OUTDIR, --outdir OUTDIR\n"
"                        output directory\n"
"  -c CHANNEL, --channel CHANNEL\n"
"                        number of output color channels\n"
"  -w WIDTH, --width WIDTH\n"
"                        width of output image\n"
"  -g HEIGHT, --height HEIGHT\n"
"                        height of output image\n"
"  -m MODE, --mode MODE  shaping mode (trimming or padding)\n"
"  -s SHUFFLE, --shuffle SHUFFLE\n"
"                        shuffle mode (true or false)\n"
"  -f1 FILE1, --file1 FILE1\n"
"                        output file name 1\n"
"  -r1 RATIO1, --ratio1 RATIO1\n"
"                        output file ratio(%) 1\n"
"  -f2 FILE2, --file2 FILE2\n"
"                        output file name 2\n"
"  -r2 RATIO2, --ratio2 RATIO2\n"
"                        output file ratio(%) 2"
msgstr ""

#: ../../python/command_line_interface.rst:223
msgid "Upload dataset to Neural Network Console"
msgstr "Neural Network Console へデータセットをアップロード"

#: ../../python/command_line_interface.rst:225
msgid ""
"usage: nnabla_cli upload [-h] [-e ENDPOINT] token filename\n"
"\n"
"positional arguments:\n"
"  token                 token for upload\n"
"  filename              filename to upload\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -e ENDPOINT, --endpoint ENDPOINT\n"
"                        set endpoint uri"
msgstr ""

#: ../../python/command_line_interface.rst:239
msgid "Create dataset archive for Neural Network Console"
msgstr "Neural Network Console 用のデータセットのアーカイブ作成"

#: ../../python/command_line_interface.rst:242
msgid ""
"usage: nnabla_cli create_tar [-h] source destination\n"
"\n"
"positional arguments:\n"
"  source       CSV dataset\n"
"  destination  TAR filename\n"
"\n"
"optional arguments:\n"
"  -h, --help   show this help message and exit"
msgstr ""

#: ../../python/command_line_interface.rst:255
#: ../../python/command_line_interface.rst:319
msgid "File format converter"
msgstr "ファイルのフォーマット変換"

#: ../../python/command_line_interface.rst:258
msgid ""
"For detailed information please see "
":any:`file_format_converter/file_format_converter`."
msgstr "詳細は :any:`file_format_converter/file_format_converter` を参照してください。"

#: ../../python/command_line_interface.rst:261
msgid "Dump content of supported format"
msgstr "サポートされるフォーマットの内容をダンプする"

#: ../../python/command_line_interface.rst:263
msgid ""
"usage: nnabla_cli dump [-h] [-v] [-F] [-V] [--dump-limit DUMP_LIMIT]\n"
"                       [-n DUMP_VARIABLE_NAME] [-I IMPORT_FORMAT]\n"
"                       [-E NNP_IMPORT_EXECUTOR_INDEX]\n"
"                       [--nnp-exclude-preprocess] [--nnp-no-expand-"
"network]\n"
"                       FILE [FILE ...]\n"
"\n"
"positional arguments:\n"
"  FILE                  File or directory name(s) to convert.\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -v, --dump-verbose    [dump] verbose output.\n"
"  -F, --dump-functions  [dump] dump function list.\n"
"  -V, --dump-variables  [dump] dump variable list.\n"
"  --dump-limit DUMP_LIMIT\n"
"                        [dump] limit num of items.\n"
"  -n DUMP_VARIABLE_NAME, --dump-variable-name DUMP_VARIABLE_NAME\n"
"                        [dump] Specific variable name to display.\n"
"  -I IMPORT_FORMAT, --import-format IMPORT_FORMAT\n"
"                        [import] import format. (one of [NNP,ONNX])\n"
"  -E NNP_IMPORT_EXECUTOR_INDEX, --nnp-import-executor-index "
"NNP_IMPORT_EXECUTOR_INDEX\n"
"                        [import][NNP] import only specified executor.\n"
"  --nnp-exclude-preprocess\n"
"                        [import][NNP] EXPERIMENTAL exclude preprocess\n"
"                        functions when import.\n"
"  --nnp-no-expand-network\n"
"                        [import][NNP] expand network with repeat or "
"recurrent."
msgstr ""

#: ../../python/command_line_interface.rst:295
msgid "Generate NNB config file template"
msgstr "NNB のコンフィグファイルのテンプレート生成"

#: ../../python/command_line_interface.rst:297
msgid ""
"usage: nnabla_cli nnb_template [-h] [-I IMPORT_FORMAT]\n"
"                               [--nnp-no-expand-network] [-b BATCH_SIZE]\n"
"                               [-T DEFAULT_VARIABLE_TYPE]\n"
"                               FILE [FILE ...]\n"
"\n"
"positional arguments:\n"
"  FILE                  File or directory name(s) to convert.\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -I IMPORT_FORMAT, --import-format IMPORT_FORMAT\n"
"                        [import] import format. (one of [NNP,ONNX])\n"
"  --nnp-no-expand-network\n"
"                        [import][NNP] expand network with repeat or "
"recurrent.\n"
"  -b BATCH_SIZE, --batch-size BATCH_SIZE\n"
"                        [export] overwrite batch size.\n"
"  -T DEFAULT_VARIABLE_TYPE, --default-variable-type DEFAULT_VARIABLE_TYPE"
"\n"
"                        Default type of variable"
msgstr ""

#: ../../python/command_line_interface.rst:321
msgid ""
"usage: nnabla_cli convert [-h] [-I IMPORT_FORMAT] [--nnp-no-expand-"
"network]\n"
"                          [-O EXPORT_FORMAT] [-f] [-b BATCH_SIZE]\n"
"                          [--nnp-parameter-h5] [--nnp-parameter-nntxt]\n"
"                          [--nnp-exclude-parameter] [-T "
"DEFAULT_VARIABLE_TYPE]\n"
"                          [-s SETTINGS] [-c CONFIG] [-d DEFINE_VERSION] "
"[--api API]\n"
"                          [--outputs OUTPUTS] [--inputs INPUTS] FILE "
"[FILE ...]\n"
"\n"
"positional arguments:\n"
"  FILE                  File or directory name(s) to convert.\n"
"                        (When convert ckpt format of the tensorflow "
"model,\n"
"                        If the version of the checkpoint is V1, need to "
"enter the `.ckpt` file,\n"
"                        otherwise need to enter the `.meta` file.)\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -I IMPORT_FORMAT, --import-format IMPORT_FORMAT\n"
"                        [import] import format. (one of [NNP,ONNX])\n"
"  --nnp-no-expand-network\n"
"                        [import][NNP] expand network with repeat or "
"recurrent.\n"
"  --outputs OUTPUTS\n"
"                        [import][tensorflow] The name(s) of the output "
"nodes, comma separated.\n"
"                                             Only needed when convert "
"CKPT format.\n"
"  --inputs INPUTS\n"
"                        [import][tensorflow] The name(s) of the input "
"nodes, comma separated.\n"
"                                             Only needed when convert "
"CKPT format.\n"
"  -O EXPORT_FORMAT, --export-format EXPORT_FORMAT\n"
"                        [export] export format. (one of "
"[NNP,NNB,CSRC,ONNX])\n"
"  -f, --force           [export] overwrite output file.\n"
"  -b BATCH_SIZE, --batch-size BATCH_SIZE\n"
"                        [export] overwrite batch size.\n"
"  --nnp-parameter-h5    [export][NNP] store parameter with h5 format\n"
"  --nnp-parameter-nntxt\n"
"                        [export][NNP] store parameter into nntxt\n"
"  --nnp-exclude-parameter\n"
"                        [export][NNP] output without parameter\n"
"  -T DEFAULT_VARIABLE_TYPE, --default-variable-type DEFAULT_VARIABLE_TYPE"
"\n"
"                        Default type of variable\n"
"  -s SETTINGS, --settings SETTINGS\n"
"                        Settings in YAML format file.\n"
"  -c CONFIG, --config CONFIG\n"
"                        [export] config target function list.\n"
"  -d DEFINE_VERSION, --define_version\n"
"                        [export][ONNX] define onnx opset version. e.g. "
"opset_6\n"
"                        [export][ONNX] define convert to onnx for SNPE. "
"e.g. opset_snpe\n"
"                        [export][ONNX] define convert to onnx for "
"TensorRT. e.g. opset_tensorrt\n"
"                        [export][NNB] define binary format version. e.g. "
"nnb_3\n"
"  --api API             [export][NNB] Set API Level to convert to, "
"default is highest API Level."
msgstr ""

#: ../../python/command_line_interface.rst:372
msgid "Optimize pb model"
msgstr "pb モデルの最適化"

#: ../../python/command_line_interface.rst:374
msgid ""
"usage: nnabla_cli optimize [-h] input_pb_file output_pb_file\n"
"\n"
"positional arguments:\n"
"  input_pb_file       Input pre-optimized pb model.\n"
"  output_pb_file      Output optimized pb model."
msgstr ""

#: ../../python/command_line_interface.rst:384
msgid "Plot Monitor class output files"
msgstr "出力ファイルに Monitor クラスをプロット"

#: ../../python/command_line_interface.rst:386
#: ../../python/command_line_interface.rst:482
msgid "**Note**:"
msgstr "**注** :"

#: ../../python/command_line_interface.rst:388
msgid "Plotting subcommands require matplotlib package."
msgstr "サブコマンドを使用してプロットを行うためには matplotlib パッケージが必要です。"

#: ../../python/command_line_interface.rst:389
msgid ""
"By default, the following commands show a plot on your display using a "
"backend rendering engine of matplotlib depending on your environment. If "
"you want to save a plot as an image or a vector data, use ``-o`` option "
"to specifiy a file name where a plot is saved."
msgstr ""
"次のコマンドはデフォルトでディスプレイにプロットを表示します。環境によっては、matplotlib "
"のバックエンドレンダリングエンジンを使用します。プロットを画像データやベクトルデータとして保存する場合は、 ``-o`` "
"オプションを使用して、プロットを保存したいファイル名を指定してください。"

#: ../../python/command_line_interface.rst:395
msgid "MonitorSeries"
msgstr "MonitorSeries"

#: ../../python/command_line_interface.rst:397
msgid ""
"usage: nnabla_cli plot_series [-h] [-l LABEL] [-o OUTFILE] [-x XLABEL]\n"
"                              [-y YLABEL] [-t TITLE] [-T YLIM_MAX]\n"
"                              [-B YLIM_MIN] [-R XLIM_MAX] [-L XLIM_MIN]\n"
"                              infile [infile ...]\n"
"\n"
"Plot *.series.txt files produced by nnabla.monitor.MonitorSeries class.\n"
"\n"
"Example:\n"
"\n"
"    nnabla_cli plot_series -x \"Epochs\" -y \"Squared error loss\" -T 10 "
"-l \"config A\" -l \"config B\" result_a/Training-loss.series.txt "
"result_b/Training-loss.series.txt\n"
"\n"
"positional arguments:\n"
"  infile                Path to input file.\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -l LABEL, --label LABEL\n"
"                        Label of each plot.\n"
"  -o OUTFILE, --outfile OUTFILE\n"
"                        Path to output file.\n"
"  -x XLABEL, --xlabel XLABEL\n"
"                        X-axis label of plot.\n"
"  -y YLABEL, --ylabel YLABEL\n"
"                        Y-axis label of plot.\n"
"  -t TITLE, --title TITLE\n"
"                        Title of plot.\n"
"  -T YLIM_MAX, --ylim-max YLIM_MAX\n"
"                        Y-axis plot range max.\n"
"  -B YLIM_MIN, --ylim-min YLIM_MIN\n"
"                        Y-axis plot range min.\n"
"  -R XLIM_MAX, --xlim-max XLIM_MAX\n"
"                        X-axis plot range max.\n"
"  -L XLIM_MIN, --xlim-min XLIM_MIN\n"
"                        X-axis plot range min."
msgstr ""

#: ../../python/command_line_interface.rst:436
msgid "MonitorTimeElapsed"
msgstr "MonitorTimeElapsed"

#: ../../python/command_line_interface.rst:438
msgid ""
"usage: nnabla_cli plot_timer [-h] [-l LABEL] [-o OUTFILE] [-x XLABEL]\n"
"                             [-y YLABEL] [-t TITLE] [-T YLIM_MAX]\n"
"                             [-B YLIM_MIN] [-R XLIM_MAX] [-L XLIM_MIN] "
"[-e]\n"
"                             [-u TIME_UNIT]\n"
"                             infile [infile ...]\n"
"\n"
"Plot *.timer.txt files produced by nnabla.MonitorTimeElapsed class.\n"
"\n"
"Example:\n"
"\n"
"    nnabla_cli plot_timer -x \"Epochs\" -l \"config A\" -l \"config B\" "
"result_a/Epoch-time.timer.txt result_b/Epoch-time.timer.txt\n"
"\n"
"positional arguments:\n"
"  infile                Path to input file.\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -l LABEL, --label LABEL\n"
"                        Label of each plot.\n"
"  -o OUTFILE, --outfile OUTFILE\n"
"                        Path to output file.\n"
"  -x XLABEL, --xlabel XLABEL\n"
"                        X-axis label of plot.\n"
"  -y YLABEL, --ylabel YLABEL\n"
"                        Y-axis label of plot.\n"
"  -t TITLE, --title TITLE\n"
"                        Title of plot.\n"
"  -T YLIM_MAX, --ylim-max YLIM_MAX\n"
"                        Y-axis plot range max.\n"
"  -B YLIM_MIN, --ylim-min YLIM_MIN\n"
"                        Y-axis plot range min.\n"
"  -R XLIM_MAX, --xlim-max XLIM_MAX\n"
"                        X-axis plot range max.\n"
"  -L XLIM_MIN, --xlim-min XLIM_MIN\n"
"                        X-axis plot range min.\n"
"  -e, --elapsed         Plot total elapsed time. By default, it plots "
"elapsed time per iteration.\n"
"  -u TIME_UNIT, --time-unit TIME_UNIT\n"
"                        Time unit chosen from {s|m|h|d}."
msgstr ""

#: ../../python/command_line_interface.rst:480
msgid "Draw a graph from NNP or .nntxt files"
msgstr "NNP または .nntxt ファイルからグラフを描く"

#: ../../python/command_line_interface.rst:484
msgid ""
"This feature requires ``graphviz`` installed as a `Python package "
"<https://graphviz.readthedocs.io/en/stable/manual.html#installation>`_. "
"The ``graphviz`` Python is a interface to `graphviz library "
"<https://www.graphviz.org/>`_ which is not installed by ``pip`` command. "
"You have to install it using ``apt`` on Ubuntu for example."
msgstr ""
"この機能を使用するためには `Python package "
"<https://graphviz.readthedocs.io/en/stable/manual.html#installation>`_ "
"としてインストールされた ``graphviz`` が必要です。 ``graphviz`` Python は `graphviz ライブラリ "
"<https://www.graphviz.org/>`_ へのインターフェイスですが、 ``pip`` "
"コマンドではインストールされません。Ubuntu の ``apt`` などを使用してインストールしてください。"

#: ../../python/command_line_interface.rst:487
msgid ""
"usage: nnabla_cli draw_graph [-h] [-o OUTPUT_DIR] [-n NETWORK] [-f "
"FORMAT]\n"
"                             input\n"
"\n"
"Draw a graph in a NNP or nntxt file with graphviz.\n"
"\n"
"Example:\n"
"\n"
"    nnabla_cli draw_graph -o output-folder path-to-nnp.nnp\n"
"\n"
"positional arguments:\n"
"  input                 Path to input nnp or nntxt.\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n"
"                        Output directory.\n"
"  -n NETWORK, --network NETWORK\n"
"                        Network names to be drawn.\n"
"  -f FORMAT, --format FORMAT\n"
"                        Graph saving format compatible with graphviz "
"(`pdf`, `png`, ...)."
msgstr ""

#: ../../python/command_line_interface.rst:512
msgid "Development"
msgstr "開発"

#: ../../python/command_line_interface.rst:515
msgid "Generate function information"
msgstr "関数情報の生成"

#: ../../python/command_line_interface.rst:517
msgid ""
"usage: nnabla_cli function_info [-h] [-o OUTFILE] [-f FUNC_SET] [-c "
"CONFIG]\n"
"                                [-t TARGET] [-q --query] [--nnp-no-"
"expand-network]\n"
"                                [--api API] [FILE] [FILE ...]\n"
"\n"
"positional arguments:\n"
"  FILE                  Path to nnp file.\n"
"\n"
"optional arguments:\n"
"  -h, --help  show this help message and exit\n"
"  -o OUTFILE, --output OUTFILE\n"
"                      output filename, *.txt or *.yaml, the default is "
"stdout.\n"
"  -f FUNC_SET, --all_support FUNC_SET\n"
"                      select function set: NNB, ONNX, the default is "
"nnabla.\n"
"  -c CONFIG, --config CONFIG\n"
"                      user config file for target constraint, *.txt file "
"of the\n"
"                      function list or the \"opset_\" args.\n"
"  -t, --target\n"
"                      output target function list.\n"
"  -q, --query\n"
"                      query the detail of a function.\n"
"  --nnp-no-expand-network\n"
"                      [import][NNP] expand network with repeat or "
"recurrent.\n"
"  --api API           List up api levels"
msgstr ""

#: ../../python/command_line_interface.rst:544
msgid "Display version"
msgstr "バージョンの表示"

#: ../../python/command_line_interface.rst:546
msgid ""
"usage: nnabla_cli version [-h]\n"
"\n"
"optional arguments:\n"
"  -h, --help  show this help message and exit"
msgstr ""

#~ msgid ""
#~ "usage: nnabla_cli convert [-h] [-I "
#~ "IMPORT_FORMAT] [--nnp-no-expand-network]\n"
#~ ""
#~ "                          [-O EXPORT_FORMAT] [-f] [-b BATCH_SIZE]\n"
#~ "                          [--nnp-parameter-h5] "
#~ "[--nnp-parameter-nntxt]\n"
#~ "                          [--nnp-exclude-parameter]"
#~ " [-T DEFAULT_VARIABLE_TYPE]\n"
#~ "                          [-s SETTINGS] [-c "
#~ "CONFIG] [-d DEFINE_VERSION] [--api API]\n"
#~ ""
#~ "                          [--outputs OUTPUTS] "
#~ "[--inputs INPUTS] FILE [FILE ...]\n"
#~ "\n"
#~ "positional arguments:\n"
#~ "  FILE                  File or directory name(s) to convert.\n"
#~ "                        (When convert ckpt "
#~ "format of the tensorflow model,\n"
#~ "                        If the version of "
#~ "the checkpoint is V1, need to "
#~ "enter the `.ckpt` file,\n"
#~ "                        otherwise need to enter the `.meta` file.)\n"
#~ "\n"
#~ "optional arguments:\n"
#~ "  -h, --help            show this help message and exit\n"
#~ "  -I IMPORT_FORMAT, --import-format IMPORT_FORMAT\n"
#~ "                        [import] import format. (one of [NNP,ONNX])\n"
#~ "  --nnp-no-expand-network\n"
#~ "                        [import][NNP] expand network"
#~ " with repeat or recurrent.\n"
#~ "  --outputs OUTPUTS\n"
#~ "                        [import][tensorflow] The "
#~ "name(s) of the output nodes, comma "
#~ "separated.\n"
#~ "                                             Only needed"
#~ " when convert CKPT format.\n"
#~ "  --inputs INPUTS\n"
#~ "                        [import][tensorflow] The "
#~ "name(s) of the input nodes, comma "
#~ "separated.\n"
#~ "                                             Only needed"
#~ " when convert CKPT format.\n"
#~ "  -O EXPORT_FORMAT, --export-format EXPORT_FORMAT\n"
#~ "                        [export] export format. "
#~ "(one of [NNP,NNB,CSRC,ONNX])\n"
#~ "  -f, --force           [export] overwrite output file.\n"
#~ "  -b BATCH_SIZE, --batch-size BATCH_SIZE\n"
#~ "                        [export] overwrite batch size.\n"
#~ "  --nnp-parameter-h5    [export][NNP] store parameter with h5 format\n"
#~ "  --nnp-parameter-nntxt\n"
#~ "                        [export][NNP] store parameter into nntxt\n"
#~ "  --nnp-exclude-parameter\n"
#~ "                        [export][NNP] output without parameter\n"
#~ "  -T DEFAULT_VARIABLE_TYPE, --default-"
#~ "variable-type DEFAULT_VARIABLE_TYPE\n"
#~ "                        Default type of variable\n"
#~ "  -s SETTINGS, --settings SETTINGS\n"
#~ "                        Settings in YAML format file.\n"
#~ "  -c CONFIG, --config CONFIG\n"
#~ "                        [export] config target function list.\n"
#~ "  -d DEFINE_VERSION, --define_version\n"
#~ "                        [export][ONNX] define onnx"
#~ " opset version. e.g. opset_6\n"
#~ "                        [export][NNB] define binary"
#~ " format version. e.g. nnb_3\n"
#~ "  --api API             [export][NNB] Set "
#~ "API Level to convert to, default "
#~ "is highest API Level."
#~ msgstr ""

