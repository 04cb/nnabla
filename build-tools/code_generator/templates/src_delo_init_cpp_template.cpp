// Copyright (C) 2016 Sony Corporation
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of Sony Corporation;
// the contents of this file is not to be disclosed to third parties, copied
// or duplicated in any form, in whole or in part, without the prior written
// permission of Sony Corporation.
//
// *WARNING*
// THIS FILE IS AUTO-GENERATED BY CODE GENERATOR.
// PLEASE DO NOT EDIT THIS FILE BY HAND!
// If you want to modify this file, edit following files.
// - build-tools/code_generator/templates/src_nbla_init_cpp_template.cpp
// - build-tools/code_generator/generator/generate_src_nbla_init_cpp.py


#include <nbla/cpu.hpp>
#include <nbla/array_registry.hpp>
#include <nbla/array/cpu_array.hpp>
#include <nbla/function_registry.hpp>
{include_functions}
#include <nbla/solver_registry.hpp>
#include <nbla/solver/adadelta.hpp>
#include <nbla/solver/adagrad.hpp>
#include <nbla/solver/adam.hpp>
#include <nbla/solver/adamax.hpp>
#include <nbla/solver/momentum.hpp>
#include <nbla/solver/nesterov.hpp>
#include <nbla/solver/rmsprop.hpp>
#include <nbla/solver/sgd.hpp>
#include <nbla/communicator_registry.hpp>
#include <nbla/communicator/data_parallel_communicator.hpp>

namespace nbla {{
void init_cpu() {{
  static bool is_initialized = false;
  if (is_initialized)
    return;

  // Array registration
  NBLA_REGISTER_ARRAY_CREATOR(CpuArray);
  SingletonManager::get<Cpu>()->register_array_class("CpuArray");
  NBLA_REGISTER_ARRAY_CREATOR(CpuCachedArray);
  SingletonManager::get<Cpu>()->register_array_class("CpuCachedArray");
  NBLA_REGISTER_ARRAY_SYNCHRONIZER(CpuArray, CpuCachedArray,
                                   synchronizer_default);
  NBLA_REGISTER_ARRAY_SYNCHRONIZER(CpuCachedArray, CpuArray,
                                   synchronizer_default);

  // Function registration
{register_functions}

  // Solver registration
  typedef Adadelta<float> Adadeltaf;
  NBLA_REGISTER_SOLVER_IMPL(Adadelta, Adadeltaf, 0, "cpu", "default", float, float,
    float);
  typedef Adagrad<float> Adagradf;
  NBLA_REGISTER_SOLVER_IMPL(Adagrad, Adagradf, 0, "cpu", "default", float, float);
  typedef Adam<float> Adamf;
  NBLA_REGISTER_SOLVER_IMPL(Adam, Adamf, 0, "cpu", "default", float, float,
    float, float);
  typedef Adamax<float> Adamaxf;
  NBLA_REGISTER_SOLVER_IMPL(Adamax, Adamaxf, 0, "cpu", "default", float, float,
    float, float);
  typedef Momentum<float> Momentumf;
  NBLA_REGISTER_SOLVER_IMPL(Momentum, Momentumf, 0, "cpu", "default", float, float);
  typedef Nesterov<float> Nesterovf;
  NBLA_REGISTER_SOLVER_IMPL(Nesterov, Nesterovf, 0, "cpu", "default", float, float);
  typedef RMSprop<float> RMSpropf;
  NBLA_REGISTER_SOLVER_IMPL(RMSprop, RMSpropf, 0, "cpu", "default", float, float,
    float);
  typedef Sgd<float> Sgdf;
  NBLA_REGISTER_SOLVER_IMPL(Sgd, Sgdf, 0, "cpu", "default", float);

  // Communicator registration
  typedef DataParallelCommunicator<float> DataParallelCommunicatorf;
  NBLA_REGISTER_COMMUNICATOR_IMPL(DataParallelCommunicator, DataParallelCommunicatorf,
      0, "cpu", "default");


  is_initialized = true;
}}

void clear_cpu_memory_cache() {{
  SingletonManager::get<Cpu>()->memcache().clear();
}}

}}
